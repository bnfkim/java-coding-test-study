import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.StringTokenizer;

public class Main {

	static long[][] map = new long[8][8];
	static char key;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		for (int i = 0; i < 8; i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for (int j = 0; j < 8; j++) {
				map[i][j] = Long.parseLong(st.nextToken());
			}
		}
		key = (char) br.read();

		solve();

		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				System.out.print(map[i][j] + " ");
			}
			System.out.println();
		}
	}

	private static void solve() {
		switch (key) {
		case 'L':
			moveLeft();
			break;
		case 'R':
			moveRight();
			break;
		case 'U':
			moveUp();
			break;
		case 'D':
			moveDown();
			break;
		}
	}

	private static void moveLeft() {
		for (int i = 0; i < 8; i++) {
			List<Long> nums = new ArrayList<>();
			boolean merged = false;

			for (int j = 0; j < 8; j++) {
				if (map[i][j] == 0) {
					continue;
				}
				if (!merged && nums.size() > 0 && map[i][j] == nums.get(nums.size() - 1)) {
					nums.set(nums.size() - 1, map[i][j] * 2);
					merged = true;
				} else {
					nums.add(map[i][j]);
					merged = false;
				}
				map[i][j] = 0;
			}

			for (int j = 0; j < nums.size(); j++) {
				map[i][j] = nums.get(j);
			}
		}
	}

	private static void moveRight() {
		for (int i = 0; i < 8; i++) {
			List<Long> nums = new ArrayList<>();
			boolean merged = false;

			for (int j = 7; j >= 0; j--) {
				if (map[i][j] == 0) {
					continue;
				}
				if (!merged && nums.size() > 0 && map[i][j] == nums.get(nums.size() - 1)) {
					nums.set(nums.size() - 1, map[i][j] * 2);
					merged = true;
				} else {
					nums.add(map[i][j]);
					merged = false;
				}
				map[i][j] = 0;
			}

			for (int j = 0; j < nums.size(); j++) {
				map[i][7 - j] = nums.get(j);
			}
		}
	}

	private static void moveUp() {
		for (int j = 0; j < 8; j++) {
			List<Long> nums = new ArrayList<>();
			boolean merged = false;

			for (int i = 0; i < 8; i++) {
				if (map[i][j] == 0) {
					continue;
				}
				if (!merged && nums.size() > 0 && map[i][j] == nums.get(nums.size() - 1)) {
					nums.set(nums.size() - 1, map[i][j] * 2);
					merged = true;
				} else {
					nums.add(map[i][j]);
					merged = false;
				}
				map[i][j] = 0;
			}

			for (int i = 0; i < nums.size(); i++) {
				map[i][j] = nums.get(i);
			}
		}
	}

	private static void moveDown() {
		for (int j = 0; j < 8; j++) {
			List<Long> nums = new ArrayList<>();
			boolean merged = false;

			for (int i = 7; i >= 0; i--) {
				if (map[i][j] == 0) {
					continue;
				}
				if (!merged && nums.size() > 0 && map[i][j] == nums.get(nums.size() - 1)) {
					nums.set(nums.size() - 1, map[i][j] * 2);
					merged = true;
				} else {
					nums.add(map[i][j]);
					merged = false;
				}
				map[i][j] = 0;
			}

			for (int i = 0; i < nums.size(); i++) {
				map[7 - i][j] = nums.get(i);
			}
		}
	}
}
